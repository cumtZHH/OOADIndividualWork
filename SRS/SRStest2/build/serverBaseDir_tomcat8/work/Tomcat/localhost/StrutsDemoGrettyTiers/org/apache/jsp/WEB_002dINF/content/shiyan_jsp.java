/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.23
 * Generated at: 2016-07-13 07:59:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.content;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class shiyan_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<link href=\"static/uploadify/uploadify.css\" rel=\"stylesheet\"  \r\n");
      out.write("    type=\"text/css\" />  \r\n");
      out.write("<script type=\"text/javascript\"  \r\n");
      out.write("    src=\"static/uploadify/jquery-1.4.2.min.js\"></script>  \r\n");
      out.write("<script type=\"text/javascript\" src=\"static/uploadify/swfobject.js\"></script>  \r\n");
      out.write("<script type=\"text/javascript\"  \r\n");
      out.write("    src=\"static/uploadify/jquery.uploadify.v2.1.4.min.js\"></script>  \r\n");
      out.write("<script type=\"text/javascript\">  \r\n");
      out.write("    $(document).ready(function() {  \r\n");
      out.write("        $(\"#uploadify\").uploadify({  \r\n");
      out.write("            'uploader' : 'static/uploadify/uploadify.swf', //是组件自带的flash，用于打开选取本地文件的按钮  \r\n");
      out.write("            'script' : 'upload.action',//处理上传的路径，这里使用Struts2是XXX.action  \r\n");
      out.write("            'scriptData' :{'catId':$('#catId').val()},  \r\n");
      out.write("            'cancelImg' : 'static/uploadify/cancel.png',//取消上传文件的按钮图片，就是个叉叉  \r\n");
      out.write("            'folder' : 'uploads',//上传文件的目录  \r\n");
      out.write("            'fileDataName' : 'uploadify',//和input的name属性值保持一致就好，Struts2就能处理了  \r\n");
      out.write("            'queueID' : 'fileQueue',  \r\n");
      out.write("            'auto' : false,//是否选取文件后自动上传  \r\n");
      out.write("            'multi' : true,//是否支持多文件上传  \r\n");
      out.write("            'simUploadLimit' : 1,//每次最大上传文件数  \r\n");
      out.write("            'queueSizeLimit' : 50,  \r\n");
      out.write("            'removeCompleted' : true,  \r\n");
      out.write("            'buttonText' : 'BORWSE',//按钮上的文字  \r\n");
      out.write("            'displayData' : 'percentage',//有speed和percentage两种，一个显示速度，一个显示完成百分比  \r\n");
      out.write("            'fileDesc' : '支持格式:jpg/gif/jpeg/png/bmp.', //如果配置了以下的'fileExt'属性，那么这个属性是必须的  \r\n");
      out.write("            'fileExt' : '*.jpg;*.gif;*.jpeg;*.png;*.bmp',//允许的格式  \r\n");
      out.write("            'onComplete' : function(event, queueID, fileObj, response, data) {  \r\n");
      out.write("                //$(\"#result\").html(response);//显示上传成功结果  \r\n");
      out.write("                //setInterval(\"showResult()\", 2000);//两秒后删除显示的上传成功结果  \r\n");
      out.write("                window.location.href=\"photoManage/uploadPhoto.action?catId=\"+$('#catId').val();//上传成功后跳转，并传递参数  \r\n");
      out.write("            }  \r\n");
      out.write("        });  \r\n");
      out.write("    });  \r\n");
      out.write("  \r\n");
      out.write("    //function showResult() {//删除显示的上传成功结果  \r\n");
      out.write("    //  $(\"#result\").html(\"\");  \r\n");
      out.write("    //}  \r\n");
      out.write("    function uploadFile() {//上传文件  \r\n");
      out.write("        jQuery('#uploadify').uploadifyUpload();  \r\n");
      out.write("    }  \r\n");
      out.write("    function clearFile() {//清空所有上传队列  \r\n");
      out.write("        jQuery('#uploadify').uploadifyClearQueue();  \r\n");
      out.write("    }  \r\n");
      out.write("</script>  \r\n");
      out.write("                <input type=\"file\" name=\"uploadify\" id=\"uploadify\"/>  \r\n");
      out.write("                <s:hidden name=\"catId\"></s:hidden> //上传成功后要传递的参数值                 \r\n");
      out.write("                <div>                  \r\n");
      out.write("                        <div id=\"fileQueue\"></div>                   \r\n");
      out.write("                </div>  \r\n");
      out.write("                <input type=\"button\" onclick=\"uploadFile()\"  value=\"开始上传\">   \r\n");
      out.write("                <input type=\"button\" onclick=\"clearFile()\" value=\"取消所有上传\">  ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
